#include <iostream>
#include <vector>
#include <cmath>
#include <bitset>
#include <limits>

using namespace std;

const int INF = numeric_limits<int>::max();

int tsp(vector<vector<int>>& graph) {
    int n = graph.size();
    int max_mask = 1 << n;
    
    // dp[mask][i] stores the minimum cost to visit cities in mask, ending at city i
    vector<vector<int>> dp(max_mask, vector<int>(n, INF));

    // Initialize the base case
    dp[1][0] = 0;

    for (int mask = 1; mask < max_mask; mask += 2) {
        for (int i = 1; i < n; i++) {
            if (mask & (1 << i)) {
                for (int j = 0; j < n; j++) {
                    if (i != j && (mask & (1 << j))) {
                        dp[mask][i] = min(dp[mask][i], dp[mask ^ (1 << i)][j] + graph[j][i]);
                    }
                }
            }
        }
    }

    int minCost = INF;
    for (int i = 1; i < n; i++) {
        minCost = min(minCost, dp[max_mask - 1][i] + graph[i][0]);
    }

    return minCost;
}

int main() {
    int n;
    cout << "Enter the number of cities: ";
    cin >> n;

    vector<vector<int>> graph(n, vector<int>(n));

    cout << "Enter the adjacency matrix:" << endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cin >> graph[i][j];
        }
    }

    int minCost = tsp(graph);
    cout << "Minimum cost of visiting all cities: " << minCost << endl;

    return 0;
}
